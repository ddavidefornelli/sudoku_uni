//SUDOKU 9X9
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 9

// Funzione per controllare se un numero può essere inserito in una posizione
int is_safe(int grid[N][N], int row, int col, int num) {
    for (int x = 0; x < N; x++) {
        if (grid[row][x] == num || grid[x][col] == num)
            return 0;
    }
    
    int startRow = row - row % 3, startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num)
                return 0;
        }
    }
    return 1;
}

// Funzione ricorsiva per generare la griglia completa
int solve_sudoku(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            if (grid[row][col] == 0) {
                int numbers[N] = {1,2,3,4,5,6,7,8,9};
                for (int i = 0; i < N; i++) {
                    int j = rand() % N;
                    int temp = numbers[i];
                    numbers[i] = numbers[j];
                    numbers[j] = temp;
                }
                for (int i = 0; i < N; i++) {
                    if (is_safe(grid, row, col, numbers[i])) {
                        grid[row][col] = numbers[i];
                        if (solve_sudoku(grid))
                            return 1;
                        grid[row][col] = 0;
                    }
                }
                return 0;
            }
        }
    }
    return 1;
}

// Funzione per stampare la griglia
void print_grid(int grid[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", grid[i][j]);
        }
        printf("\n");
    }
}

int main() {
    srand(time(NULL));
    int grid[N][N] = {0};
    
    if (solve_sudoku(grid)) {
        printf("Sudoku generato:\n");
        print_grid(grid);
    } else {
        printf("Errore nella generazione del Sudoku!\n");
    }
    return 0;
}


//----------------------------------------------------------------------------------------------------------------------------------------------
//SUDOKU 3X3

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 3

// Funzione per controllare se un numero può essere inserito in una posizione
int is_safe(int grid[N][N], int row, int col, int num) {
    for (int x = 0; x < N; x++) {
        if (grid[row][x] == num || grid[x][col] == num)
            return 0;
    }
    return 1;
}

// Funzione ricorsiva per generare la griglia completa
int solve_sudoku(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            if (grid[row][col] == 0) {
                int numbers[N] = {1,2,3};
                for (int i = 0; i < N; i++) {
                    int j = rand() % N;
                    int temp = numbers[i];
                    numbers[i] = numbers[j];
                    numbers[j] = temp;
                }
                for (int i = 0; i < N; i++) {
                    if (is_safe(grid, row, col, numbers[i])) {
                        grid[row][col] = numbers[i];
                        if (solve_sudoku(grid))
                            return 1;
                        grid[row][col] = 0;
                    }
                }
                return 0;
            }
        }
    }
    return 1;
}

// Funzione per stampare la griglia
void print_grid(int grid[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", grid[i][j]);
        }
        printf("\n");
    }
}

int main() {
    srand(time(NULL));
    int grid[N][N] = {0};
    
    if (solve_sudoku(grid)) {
        printf("Mini-Sudoku generato:\n");
        print_grid(grid);
    } else {
        printf("Errore nella generazione del Mini-Sudoku!\n");
    }
    return 0;
}

//-------------------------------------------------------------------------------------------------------------------------------------------
//SUDOKU 12X12

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 12

// Funzione per controllare se un numero può essere inserito in una posizione
int is_safe(int grid[N][N], int row, int col, int num) {
    for (int x = 0; x < N; x++) {
        if (grid[row][x] == num || grid[x][col] == num)
            return 0;
    }
    
    int startRow = row - row % 4, startCol = col - col % 3;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num)
                return 0;
        }
    }
    return 1;
}

// Funzione ricorsiva per generare la griglia completa
int solve_sudoku(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            if (grid[row][col] == 0) {
                int numbers[N];
                for (int i = 0; i < N; i++) numbers[i] = i + 1;
                
                for (int i = 0; i < N; i++) {
                    int j = rand() % N;
                    int temp = numbers[i];
                    numbers[i] = numbers[j];
                    numbers[j] = temp;
                }
                for (int i = 0; i < N; i++) {
                    if (is_safe(grid, row, col, numbers[i])) {
                        grid[row][col] = numbers[i];
                        if (solve_sudoku(grid))
                            return 1;
                        grid[row][col] = 0;
                    }
                }
                return 0;
            }
        }
    }
    return 1;
}

// Funzione per stampare la griglia
void print_grid(int grid[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%2d ", grid[i][j]);
        }
        printf("\n");
    }
}

int main() {
    srand(time(NULL));
    int grid[N][N] = {0};
    
    if (solve_sudoku(grid)) {
        printf("Sudoku 12x12 generato:\n");
        print_grid(grid);
    } else {
        printf("Errore nella generazione del Sudoku 12x12!\n");
    }
    return 0;
}


